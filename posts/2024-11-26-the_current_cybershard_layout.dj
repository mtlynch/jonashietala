---toml
title = "The current Cybershard layout"
tags = ["Computer", "Keyboards", "Keyboard layouts", "Cybershard"]
favorite = true
---

:table-of-content:

This is the keyboard layout I'm using for my custom keyboard [that I generated, printed, and hand-wired][cybershard].
It's a minimalistic keyboard of 35 keys and features an integrated trackball on the right-hand side.

The keyboard layout started out as a direct copy of the [T-34 keyboard layout][t-34-curr], with some small modifications from the 34-key keyboard T-34 was designed for:

- An extra two keys on the left-hand side, in the ring and middle finger columns.
- Removed the second thumb key on the right-hand side.
- Accommodation for mouse keys and trackball handling.

While the layout has diverged since then, the design philosophy from [original T-34 post][t-34] still holds true and I recommend it as it may explain why the layout looks like it does.

::: note
The layout could pretty easily be converted to a 32-key layout by removing the two extra keys and the inner thumb key on the left-hand side.
These keys are barely used and the biggest reason I have them is that I don't have the energy to rebuild the keyboard.
:::

# Legend

![](/images/cybershard-layout/legend.svg){embed=true}

I use quite a number of special features for the keys and I've tried to color code according to the above legend.

::: note
I made a bit of a detour and developed [my own tool][layout_gen] to generate the embedded svg images in this post as the existing tools didn't _exactly_ match my preferences.

Note that I made it only for myself and it will probably break in many ways if you try to use it for your layout.
It's also extremely ugly code...
:::

[layout_gen]: https://github.com/treeman/layout_gen

# Layers

[Layers][] are super important for smaller keyboards and I use them a ton.

## Base

![](/images/cybershard-layout/_BASE.svg){embed=true}

* The [repeat key](#Repeat-key) is used to output the last pressed key.
* I shift keys using [auto shift][] (see [long press](#Long-press)) and [CAPSWORD][].
* The letters `Z` and `Q`, together with a bunch of other keys, are on [combos][].
* The keys for `F2`, `F12` and `FUN` are just extras and aren't in a comfortable enough position to warrant anything more common.

::: note
If you wonder why the top left and right keys are off that's because the keyboard is built with them further away and with a different curvature than the other keys in the outer columns.
I don't press `J` or `.` with my pinky but with my ring finger, leaving only two keys dedicated to the pinkies.
:::

## Swedish overlay

![Swedish overlay.](/images/cybershard-layout/_SWE.svg){embed=true}

When I want to write Swedish I activate this layer that replaces `()_` with `åäö`, or I use [combos][] from any layer.

## Symbols

![Symbols layer.](/images/cybershard-layout/_SYM.svg){embed=true}

I typically use [combos][] to output symbols (following the same layout pattern as the symbols layer).
The symbols layer is mostly used to roll symbol pairs like `{}` or `#[`.

Some common symbol sequences (like `->`, ` != `, or ` ``` `) exists as [combos][] and others as [long press](#Long-press).

## Numbers

![Numbers layer. The browner keys (like `J`) turn off [NUMWORD](#NUMWORD).](/images/cybershard-layout/_NUM.svg){embed=true}

While I can activate the number layer persistently (using [leader sequences](#Leader-sequences)) I typically use [combos][num-sym-combos] for single digitis (like `0`), or [NUMWORD][] for larger numbers (like `1984`).

[NUMWORD][] makes the number layer smart, so it will deactivate when certain keys are pressed.
It's used to type numbers in text or code and for relative movement in Vim, where `17J` would move 17 lines down and then turn off the number layer.
Jumping directly to a line in Vim with `12G` is also made convenient.

If I want to enter the layer without it turning off I can either use [leadere sequences](#Leader-sequences) to activate it persistently or hold the [NUMWORD][] [combo](#Combos-over-keyboard-halfs) (hold both thumbs).
The layer won't release until both thumb keys are released, so `Space` can be tapped with the left thumb without leaving the number layer.

`@u` is there to easily activate macros in Vim. For example `7@u` in the number layer would run the `u` macro 7 times and then turn off [NUMWORD][].

## Function keys

![Function keys.](/images/cybershard-layout/_FUN.svg){embed=true}

* The function keys follow the same layout as the [numbers layer](#Numbers).
* The trackball `DPI` can be lowered and raised at runtime.

## Navigation layers

![Navigation layer.](/images/cybershard-layout/_NAV.svg){embed=true}

* `Gui-W`, `Gui-E` and `Gui-R` are used to switch between monitors and `Gui-J`/`Gui-K` to switch windows in [xmonad][].
* This layer is used in conjunction with the trackball, giving access to mouse keys.
* `Shift` + `Left Mouse` can be used to drag, `Ctrl` + `A` to select, and `Ctrl` + `C` to copy (on [long press](#Long-press)).
* Tabbing is for switching browser tabs and the `Back` / `Fwd` mouse buttons goes backwards and forwards in history.
* `Ctrl` + arrow is used to switch windows in Vim.
* The [workspace layer](#Workspace-layer) is triggered by first holding `Space`, and then holding the right thumb key (`WNAV`).

![Arrows on the left-hand side.](/images/cybershard-layout/_ARROW.svg){embed=true}

This layer exists for the rare occasions I want to use all the arrow keys with the left hand instead of the right.

## Workspace layer

![Workspace layer. All keys have an implicit `Gui` modifier.](/images/cybershard-layout/_WNAV.svg){embed=true}

This is used for all window and workspace management in [xmonad][]. Some common operations are also on the [navigation layer](#Navigation-layer).
[Auto shift](#Long-press) works and can used to send a window to another workspace (`Gui` + `Shift` + `2`).

## Windows layer

![Windows layer. All keys have an implicit `Alt` modifier.](/images/cybershard-layout/_WIN.svg){embed=true}

This is purely to enable window switching using `Alt-Tab` and `Ctrl-Alt-Tab`, without releasing `Alt`.

## Special characters

![Specials layer.](/images/cybershard-layout/_SPEC.svg){embed=true}

The [dead keys][] add diacritic to any letter. For example, to get `é` you can use the dead key `´` then `e`, and the operating system will merge them together.
(`É` also exists as a [combo][combos].)

## Modifiers

![Modifiers.](/images/cybershard-layout/_MODS.svg){embed=true}

I typically use [long press](#Long-press) for shift and [combos][] for other modifiers, this layer is a fallback for when those aren't enough (the layer is mostly used for `Right Alt`).

# Combos

[Combos][qmk-combos] is another fantastic tool that I (ab)use a lot. Simply put it allows you to press multiple keys at once and acts as another key---very useful for smaller layouts.

::: important
These combos are layer independent, and work regardless of what layers are activated.
The base layer is shown in the graphics for reference.
:::

## Neighbour combos

These combos are made by keys next to each other, either horizontally (pressed with two fingers) or vertically (pressed with one finger in the middle of two keys).

![2-key neighboring combos.](/images/cybershard-layout/neighbour_combos.svg){embed=true}

* Some combos have a separate hold behaviour; for instance holding `Escape` activates the [symbols layer](#Symbols), allowing me to output `[]` easily.
* `vsplit` splits a window vertically in Vim and `hsplit` splits it horizontally, and `Close Window` closes a window in Vim (`<C-w>q`).
* `Clear` resets all states; sets the [base](#Base) layer, releases modifiers, stops [CAPSWORD][] and [NUMWORD][], and clears other persistent states.
* `Ctrl` + `Shift` + `M` is the shortcut to mute/unmute in Teams.

![3-key horizontal combos.](/images/cybershard-layout/mid_triple_combos.svg){embed=true}

* `SWE` activates the [Swedish layer](#Swedish-overlay), and if prefixed with `()_` it will replace that with `åäö` and vice versa. So for example if I typed `hall(` I would press `SWE` to get `hallå`, with the Swedish layer activated.
* `Ctrl W` is used to close tabs in Firefox.

![A 4-key horizontal combo.](/images/cybershard-layout/save_vim.svg){embed=true}

* `Save Vim` is a 4-key combo that saves the buffer in Vim.

## Split combos

These split combos uses the ring and index finger.

![Combos for the quotes `"` and `'`.](/images/cybershard-layout/quotes.svg){embed=true}

![Combos don't have to be on the same row, these angled combos are fairly comfortable.](/images/cybershard-layout/angled.svg){embed=true}

![One-shot `Alt` on the left combo and holding the right combo activates the [windows](#Windows-layer) layer (with implicit `Alt`).](/images/cybershard-layout/split_top.svg){embed=true}

![[Leader key][leader key] on the bottom row.](/images/cybershard-layout/split_lower.svg){embed=true}

## Combos over keyboard halfs

![](/images/cybershard-layout/smart_layers.svg){embed=true}

* Tapping `T` + `A` once activates [CAPSWORD][], tapping again makes it persistent (`CAPS LOCK`), and a third tap to deactivate `CAPS LOCK`.
* Tapping `Space` + `E` activates [NUMWORD][] and tapping them again activates the [number layer](#Numbers) persistently.

The [repeat key](#Repeat-key) works with the above, making them easier to double-tap.

![](/images/cybershard-layout/swap_unds_mins_c.svg){embed=true}

* Swaps `_` and `-`.

![](/images/cybershard-layout/specials.svg){embed=true}

* Access the [specials](#Special-characters) layer with the ring fingers.

## Thumb key combos

I have a bunch of 2-key `thumb` + `key` combos:

![Combos using `Space` and another key.](/images/cybershard-layout/MT_SPC.svg){embed=true}

![Combos using `E` and another key.](/images/cybershard-layout/SE_E.svg){embed=true}

The logic here is that `same-side thumb` + `key` = `symbol` and `opposite-side thumb` + `key` = `digit`, following the placements of the [numbers](#Numbers), [symbols](#Symbols) and [swedish](#Swedish-overlay) layers. They're used if I want to just type a single character, without having to activate a layer first.

![Combos using `FUN` and another key.](/images/cybershard-layout/FUN.svg){embed=true}

I have similar combos for the [function keys](#Function-keys).

## QMK boot

![](/images/cybershard-layout/boot.svg){embed=true}

whe keycode `QMK_BOOT` enters boot mode for the microcontroller connected via USB, making it easy to update the keymap on the keyboard.
These two 5-key combos (one for each half) are almost impossible to trigger accidentally while being easily accessible.


# Additional features

While [layers][Layers] and [combos][] are the two main features I use, [QMK][] has a lot of other nifty features (and you roll your own implementation of them too).

## Long press

Most keys have a different behaviour when tapped compared to a long press. Most commonly I use this to produce shifted keys (called [auto shift][]).
So tapping the `A` key will output `a` as normal and if it it `A` will appear instead.

There are a bunch of special cases as well (many on top of [combos][]):

{ .center }
| Tap                               |  Long press |
|:----------------------------------|:------------|
| `_` `<` `>` `/` `\` `#`           |  Double, e.g `__` |
| `"` `'` `=` `` ` `` `0` `.`       |  Triple, e.g `"""` |
| `|` `&` `=`                       |  Double with spaces, e.g ` || ` |
| `!`                               |  ` != ` (with spaces) |
| `?`                               |  `{:?}` |
| `#`                               |  `{:#?}` |
| `%`                               |  `%{}` |
| `(` `[` `{`                       |  Close and move cursor between |
| `@`                               |  `@u` (paired with `qu` combo for Vim macro execution) |

## Leader sequences

I use the combo `l` + `)` as the [leader key][].
This will wait for a sequence of key presses (in contrast to combos where keys must be pressed at the same time).
I use this with mnemonics for rarely used outputs:

{ .center }
| Leader sequence       |  Action |
|:----------------------|:------------|
| `l` + `)`, `c`        |  **C**aps lock |
| `l` + `)`, `s`        |  *S*wedish input in Linux (mapped in [xmonad][]) |
| `l` + `)`, `t`, `n`   |  **T**oggle **N**umber layer |
| `l` + `)`, `t`, `s`   |  **T**oggle **S**ymbols layer |
| `l` + `)`, `t`, `f`   |  **T**oggle **F**unction layer |
| `l` + `)`, `t`, `c`   |  **T**oggle **C**aps lock escape swap |
| `l` + `)`, `Esc`   |  `Ctrl` `Shift` **Esc**ape |

## CAPSWORD

CAPSWORD is a "smart caps lock". It works like a regular caps lock, except it automatically turns off after certain keys are typed (most commonly space).

It will not turn off on letters, numbers, `_` `-` `Backspace` and the `Repeat` keys.

## NUMWORD

NUMWORD is a "smart layer". It's similar to [CAPSWORD][], except it activates and then turns off the [numbers layer](#Numbers) instead of caps lock.

It will not turn off on these keys: `0-9` `%` `/` `+` `*` `-` `_` `.` `,` `:` `=` `x` `Backspace` `Enter` and the `Repeat` keys.

## Repeat key

The repeat key simply repeats the previous key. So to type `fall` I can type `f` `a` `l` `Repeat`, using four different fingers instead of pressing `l` twice. It can also repeat things like `Ctrl-c` or `Delete`, and unlike regular keys that use [auto shift][] the `Repeat` key can be held.

## Trackball

The trackball is normally configured to move the mouse as a regular trackball.

There are different modes that alters the behavior of the trackball:

1. Lower the DPI when `Space` is held (the mouse moves slower when the [navigation layer](#Navigation-layers) is active).
1. Raise the DPI when the [`MOD` combo](#Horizontal-combos) is held (the mouse moves faster).
1. Scroll instead of moving the mouse when the [`SYM` combo](#Horizontal-combos) is held.

# More info

- Read the [T-34 series][t-34-series] for the design process and motivations of my other keyboard layout (it's the same layout with minor refinements and additions).
- See the post [Building my ultimate keyboard][cybershard] for how I designed and built the keyboard I'm using this layout with.
- For implementation details and the most up-to-date reference check out the layout's [QMK source code][src].

  ::: warn
  I use a bunch of custom re-implementations of existing QMK functionality and it's probably not a good idea to copy them.
  They're there for various reasons, such as [CAPSWORD][] not being integrated into QMK when I started using it and I can't be bothered to migrate over.

  The code is super messy and in desperate need of refactoring...
  :::

::: changelog
: 2024-11-19

  Copied the [T-34][t-34-series] layout and adapted it for the new keyboard by adding a mouse layer, remove the shortcut layer, and changed the activation of the specials layer.

: 2024-11-22

  Moved `-` to an angled combo, moving the `WIN` key to the top row,
  and move `%` to the home-row and `!` to the bottom row.

: 2024-11-23

  Reworked the mouse layer and use a more advanced triggering mechanism to be more explicit about when the layer is turned on and off.

: 2024-11-25

  Added double-tap functionality to [NUMWORD][] and [CAPSWORD][] [combos](#Combos-over-keyboard-halfs).

: 2024-11-26

  1. Moved `-` back to it's original position and placed `%` on the angled combo.
  1. Experimental functionality to swap `-` and `_` for the languages that use `kebab-case`.
  1. Removed the mouse layer and placed mouse buttons on the [navigation layer](#Navigation-layers).

: 2024-12-03

  Reworked the [navigation layer](#Navigation-layers) to keep the original positions for `PgUp`, `PgDn`, and `Tab`s.
  To allow this I moved the mouse click to index finger and demoted the `up`/`down` to the top row.

:::

{title="QMK leader key"}
[leader key]: https://docs.qmk.fm/#/feature_leader_key
{title="QMK auto shift"}
[auto shift]: https://docs.qmk.fm/#/feature_auto_shift
{title="QMK combos"}
[qmk-combos]: https://docs.qmk.fm/#/feature_combo
{title="QMK"}
[QMK]: https://docs.qmk.fm/
{title="QMK layers"}
[Layers]: https://docs.qmk.fm/#/feature_layers
{title="Xmonad"}
[xmonad]: https://xmonad.org/
{title="Dead keys"}
[dead keys]: https://en.wikipedia.org/wiki/Dead_key
{title="The T-34 keyboard layout"}
[t-34-series]: /series/t-34/
{title="T-34 first post"}
[t-34]: /blog/2021/06/03/the-t-34-keyboard-layout/
{title="The current T-34 layout"}
[t-34-curr]: /blog/2022/09/06/the_current_t-34_keyboard_layout
{title="Numbers and symbols"}
[num-sym-combos]: #Numbers-and-symbols
{title="QMK source code"}
[src]: https://github.com/treeman/qmk_firmware/tree/master/keyboards/cybershard

[cybershard]: https://www.jonashietala.se/blog/2024/11/26/building_my_ultimate_keyboard/

[combos]: #Combos
[CAPSWORD]: #CAPSWORD
[NUMWORD]: #NUMWORD

[automatic mouse layer]: https://docs.qmk.fm/features/pointing_device#pointing-device-auto-mouse
