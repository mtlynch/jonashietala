---toml
title = "Building my ultimate keyboard"
tags = ["Computer", "Keyboards", "Cybershard"]
favorite = true
---

![The Cybershard keyboard.](/images/cosmos/cybershard.jpg)

:table-of-content:

What comes to mind when you see the description "the ultimate keyboard"?

There are _many_ keyboards in this world; here are some that might fit the "ultimate" moniker:

- [Das Keyboard 4 Ultimate mechanical keyboard][das-ultimate]
- [DataHand][]
- [Ergodox EZ][ergo-ez]
- [Glove80][g80]
- [Happy Hacking Keyboard][hhkb]
- [Model M Keyboard][model-m]
- [Stenotype][] keyboards.
- [Ultimate Hacking Keyboard][uhk]
- [CharaChorder][]

Some even have "ultimate" in their name, although I'll assert that they're far from ultimate.

> Any man who must say, "I am the King", is no true king.
> ^ Tywin Lannister

I'll go one step further to say that no keyboard is universally the ultimate because it's impossible to agree on how to rank different keyboards.
For example, while I personally prefer a split keyboard, you might not.
Some people have very long fingers and some have very short fingers, making some layouts more preferable.
Others may not even have 10 fingers (or both hands), requiring more drastic modifications.

If an ultimate keyboard exists, it differs from person to person.
This is my attempt to build _my_ ultimate keyboard.

# My wishlist

To me, the ultimate keyboard should have these features:

a. Should be split to support a more natural typing position.

   Really the biggest ergonomical leap in my opinion.

a. Customized for my own fingers and typing eccentricities.

   Column stagger, curvatures and tenting are features I think I want but they need to be tuned, probably by trial-and-error.
   The position of the thumb keys is another sticking point that the other keyboards I've tried have failed to get just right.

a. Have an integrated trackball or trackpad.

   This way I don't have to move my hand so far and I can free up some valuable desk space.
   It shouldn't be operated with my thumb due to my RSI.

a. Contain the keys I need but no more.

   I like smaller keyboards and I've been very happy and with [my custom keyboard layout][t34] that only has 34 keys.
   Some modifications are fine of course but for the most part I want to be able to use the same layout on both the [Ferris][] and my new keyboard.
ii)
To fulfill these requirements I need to be able to customize all parts of the keyboard and I really don't want to learn CAD and create one from scratch; I wonder what alternatives I have?

# [Cosmos][] keyboard configurator

Having looked around, I probably want something similar to a [Dactyl][] / [Dactyl Manuform][] (many variants exists).
They're keyboards you generate from parameters (such as number of rows and columns and the amount of curvature).
I've always wanted to try one and now [with a 3D printer](/series/voron_trident), I can.

When looking for a generator I stumbled upon the [Cosmos keyboard configurator][Cosmos] and I want to gush about it a little because {=it's excellent=}.

![A relatively standard Dactyl Manuform with an encoder and trackpad.](/images/cosmos/cosmos_config.png)

It's excellent because it allows a clueless sod like me to configure a keyboard the way I want to and it has an impressive feature list:

1. Easily generate keyboards of any size.
1. Customize XY-spacing, row- and colomn curvature, and more.
1. Several pre-made thumb clusters.
1. UI to move around all the keys.
1. Supports different switches (I so need my Choc switches).
1. An `Expert` mode that allows you to customize anything via JavaScript.
1. Supports encoders, trackpads, OLED displays, and trackballs.
1. Can generate a wrist rest.
1. Exports `.stl` for easy printing or `.step` you can import to CAD.

In the `Expert` mode you lose the nice UI but you can instead customize the keyboard using Javascript.
Here's a small snippet from the tool:

```javascript
const curvature = {
  curvatureOfColumn: 15,
  curvatureOfRow: 5,
  spacingOfRows: 18, // 18x19 Choc spacing
  spacingOfColumns: 19,
  arc: 0,
};

/**
 * Useful for setting a different curvature
 * for the pinky keys.
 */
const pinkyCurvature = {
  ...curvature,
  curvatureOfColumn: 15,
};

/**
 * The plane used to position the upper keys.
 * It's rotated by the tenting and x rotation
 * then translated by the z offset.
 */
const upperKeysPlane = new Trsf()
   // `20` specifies the tenting angle.
  .rotate(20, [0, 0, 0], [0, 1, 0], false)
  .rotate(1, [0, 0, 0], [1, 0, 0], false)
  .translate(0, 0, 0, false);
```

The entire state of the keyboard is also stored in the url, so I can easily share my config by [including a link][final-version].
(Barring any breaking changes in the tool of course...)

# Initial design parameters

Even with a keyboard configurator I needed a way to start.
I already have a [layout that I really like][t34] so I wasn't starting from nothing.
These were the important parts going into the design process:

1. A 3x5 grid with 1-2 thumb keys (in practice one thumb key is enough).

   If you question why I want to build such a small keyboard I'll redirect you to the discussion in [The T-34 keyboard layout][t34-discussion] post.

1. Integrated trackball on the right-hand side.
1. Choc switches.

    One of the major decisions with a keyboard is what kind of switch to use.
    While MX-style switches are the most common I personally really love Choc switches for a couple of reasons:

    ::: plus
    - Low-profile
    - Low actuation force
    - Can be closer together
    :::

    While a low profile switch is more important for a flat keyboard, not a tented and curved one like I'm building now,
    the flatter keycaps and the switches being closer together is crucial for pressing two keys with one finger:

    ::: flex
    ![](/images/cosmos/compo_no_press.jpg)
    ![](/images/cosmos/combo_press.jpg)

    A horizontal combo is pressed with the finger in the middle of the keys. It's surprisingly comfortable.
    :::

    The low-actuation force is also more comfortable to me, it helps reduce the strain on my fingers, and makes combos (pressing several switches at once) generally more pleasant.


# Hardware and material

It's not enough with just a 3D printer, to build a working keyboard you need a bunch of hardware:

1. Two microcontrollers.

    I got the [Liatris][] microcontroller as it has enough pins to connect a trackball sensor and it supports QMK.

1. Switches

    What kind of Choc switch should I use?\
    Should they be [linear][], [tactile][sunset], or [clicky][]?\
    Exactly how heavy should they be?\
    Should they be [silent][]?

    I wasn't sure so I ordered a sampling of different switches to try.

    ![A collection of different Choc switches.](/images/cosmos/choc_switches.jpg)

    For the final keyboard I used the [Ambients silent Noctural (linear / 20gf)][silent] switches,
    where the deciding factor was getting as light switches as possible.
    (I've previously used modded 15gf switches, which were even better, but I couldn't find a way to buy them.)

1. Keycaps

    ![It's hard to decide on a colorscheme so I [bought a bunch of random colors][keycaps].](/images/cosmos/choc_keycaps.jpg)

    Keycaps aren't only for looking cool.
    A convex keycap for the thumb button instead of the standard concave one makes it much more comfortable:

    ![The blue convex keycap to the left and the red concave to the right.](/images/cosmos/keycaps_concave_convex.jpg)

    I also got keycaps for the index row with these small [homing notches][keycaps-homing] to help my fingers more easily find the home row.

1. A pair of [TRRS connectors][] and a [TRRS cable][].
1. A Trackball with a matching sensor.

    I decided to pick up [this PMW3389 sensor][pmw3389] because it was recommended in the keyboard configurator and [a red 34mm trackball from Amazon][trackball].

1. Filament for the 3D printed pieces.

   I ended up settling on the [PolyTerra PLA Army Purple][] for the case but I used a bunch of different filament during the prototype phase.

1. Diodes, screws, heatset inserts, and cable to do the wiring.

[PolyTerra PLA Army Purple]: https://www.3djake.com/polymaker/polyterra-pla-army-purple
[TRRS cable]: https://splitkb.com/products/braided-trrs-cable?variant=31226379501645
[TRRS connectors]: https://splitkb.com/products/trrs-jacks?_pos=2&_sid=2fdada9a4&_ss=r
[trackball]: https://www.amazon.se/dp/B071NX7Y2J?th=1


# Prototypes

![Some discarded prototypes.](/images/cosmos/prototype_cases.jpg)

When you're trying to design something like a custom keyboard I think you need to go through a bunch of trial-and-error until you find something that fits.

Here's a short rundown of some of the significant revisions I went through, mostly to illustrate that it's very much an iterative process.

::: note
When I first started this process the [Cosmos][] keyboard configurator didn't support generating both halves at the same time, so I focused on getting the right side comfortable first.
:::

## First print

{% v2 %}

For my first print I mostly wanted to print it out and test how a keyboard with a standard curvature felt.
I also wanted to try to place a trackball somewhere.

I ended up removing a regular thumb key (I've used two thumb keys with my [keyboard layout](/series/t-34)) to make it fit and I added a "mouse thumb key" that I plan to use as a `left mouse button` when I'm operating the trackball.
It was tricky to place the trackball as I wanted to operate it with my index + middle finger, not my thumb.

Another tweak I made was to reduce the spacing between the keys to be closer to the Choc spacing.
Choc spacing seems to be 18.6 x 17.6 mm, but I used 19 x 18 mm spacing---the attraction to round numbers is real.

![This is the very first prototype I printed.
Please ignore the bad print quality; the filament was wet and the temperature was too high. It's just a prototype so it really doesn't matter.](/images/cosmos/v2_proto.jpg)

[Cosmos reference][v2-ball],

## Pressing the top right key with the ring finger

{% v3 %}

Most of the keys on the keyboard felt fine but I had one major annoyance: 
I have a habit of using the ring finger to press the top right key instead of the pinky but with the curvature on the keyboard this just wasn't possible anymore.

You might wonder, why don't I just create a new habit and use the pinky _as you're supposed to_?
The simple answer is that I *hate* it.
To my fingers that feels beyond terrible and I'd rather remove the key and only have two keys in the outermost column.
As it happens, pressing the key with my ring finger (on a flat keyboard) feels good so I'd rather adjust the key than remove it.

::: important
That's the beauty of designing a custom keyboard for yourself---you can do weird shit that only makes sense to you.
:::

![The second printed prototype, with some keys installed for testing.
The printer clogged before the print was finished but it did its job as a prototype.](/images/cosmos/v3_proto.jpg)

![Here's an angle from the configurator showing the offset of the `p` key compared the other keys in the column.](/images/cosmos/v3_p_ring_finger.png)

I also added an extra mouse thumb key and lowered the pinky column a bit.

[Cosmos reference][v3]

## Adjust mouse keys and increase tenting

{% v4 + v5 + v6 %}

![It's starting to look like an actual keyboard.
With color coded keycaps; red for mouse-only buttons and violet for the home-row keys.](/images/cosmos/v6_proto.jpg)

Pressing `p` with my ring finger feels great.
Pressing the thumb normal thumb key feels awful because the mouse thumb keys are in the way when I relax my hand.

Adjustments made:

::: plus
- Moved mouse thumb keys to be more vertical and pressed from the side.
- Added an extra pinky key reachable when I'm using the trackball.
- Increased tenting to 20 degrees from 10 degrees.
:::

![20 degrees of tenting.](/images/cosmos/v6_config.png)

## Rounded base and pinky tweak

![Yet another prototype.](/images/cosmos/v8_proto.jpg)

::: plus
- I tried the "rounded" sides and top feature of [Cosmos][].
- The mouse pinky key was too low, I raised it up a bunch.
:::

## Thumb keys adjustments

![](/images/cosmos/v9_proto.jpg)

::: plus
- Rotated the main thumb key inwards
- Added an area for a display
:::
::: dash
- Lowered the mouse thumb keys a little
- Removed the "rounded" features
:::

## More tweaks and the left half

![](/images/cosmos/v11_proto.jpg)

::: plus
- Configure the left half of the keyboard
- Move pinky keys a little upwards
- Move all thumb keys a little further away
:::
::: dash
- Removed the display
:::

Although I said I wanted to have a 3x5 grid, the generator included an easy option to include a small bottom row with 2 extra keys (for the ring and middle finger) that I wanted to try out for the left side.
They're okay. Not uncomfortable but not quite comfortable enough that I want to have common keys there.

## Beta V3

![](/images/cosmos/v12_proto.jpg)

At this point the Beta V3 of [configurator][Cosmos] is out and in it there's several improvements, most notably:

::: plus
- Both halves can be configured at the same time.
- Can go between the Advanced and Expert tabs! WOW!

  I had to manually keep track of the JavaScript changes I made, and update them manually if I wanted to make a change in the UI...
  But no more!
:::

I had to redo most of the configuration and I think I made some minor changes that I didn't keep track of, but I made two larger ones:

::: dash
- Lowered the tenting angle to 15 degrees (from 20)
- Lowered ring pinky column key a little
:::

## Small tweaks to pinky and thumb keys

![](/images/cosmos/v13_proto.jpg)

::: plus
- Raise/tilt top pinky row key
- Move thumb keys on left side closer together
:::

## Trackball mounting types

![Roller bearings for the trackball.](/images/cosmos/roller_trackball.jpg)

When I started this project [Cosmos][] only supported a single type of trackball mount: roller bearings.
They worked quite poorly for me as the ball was spinning well in one direction but poorly in others.

Luckily new options were added and as I'm writing this there's 4 different ways you can mount the trackball:

1. Roller bearings (the old option)
2. [BTU (7.5mm or 9mm)](https://www.aliexpress.com/item/1005005411108700.html)
3. [Static ball bearings (3.175mm)](https://www.aliexpress.com/item/4000140404600.html)

Because I was burned with the bad experience (and I didn't want to rebuild the keyboard yet again) I made small prototypes of the three different options:

![The new trackball mounts; BTU 9mm, BTU 7.5mm, and static ball bearings.](/images/cosmos/trackball_types.jpg)

The BTUs had the least friction and it felt really easy to spin the ball but they were also distressingly loud.
The static ball bearings had more friction than the BTUs and less than the roller bearings while being completely silent, so I chose to go with the ball bearings.

![The ball bearings installed on the keyboard, with the trackball sensor peeking through.](/images/cosmos/trackball_mount.jpg)

While they don't feel nearly as good as the [Kensington SlimBlade][] they're decent enough.
I try not to use the mouse _that_ much and having the trackball so much closer is worth it compared to having a separate trackball unit besides the keyboard.

::: note
When I discovered this issue I had already wired up the keyboard, so to switch mount I had to redo the wiring.
It was worth it.
:::

## Remove mouse keys

![](/images/cosmos/right_complete_no_mouse_keys.jpg)

After having used the keyboard for real I realized that the three keys dedicated to mouse buttons would have to go.
There were a few issues with them:

::: dash
- The pinky key got in the way sometimes when I reached for the top column, and I couldn't retrain myself to avoid it.
- One of the goals with the [keyboard layout I use][t34] is to reduce the thumb and pinky usage of my right hand. The mouse keys counteract this goal.
- QMK's [automatic mouse layer][] feature---that activates a mouse layer when the trackball moves---is a superior solution if you're fine with having to use both hands to operate the mouse.
:::

So I had them removed and I rewired the right half for the 3rd time.
Sigh.

I think the lesson is that it's not enough to print a prototype and press keys, you have to build and _use_ the keyboard a bunch before you can evaluate some of the design decisions.

# Additional printed parts

While the case is the biggest and most important part of this kind of keyboard, there are a few other parts I had to print to complete the keyboard.

## Wrist rests

![Some of the different wrist rests I tried.](/images/cosmos/prototype_rests.jpg)

::: important
While they're called a _wrist_ rests, I don't think you should hold your arms so that there's pressure on the wrist as that can easily lead to carpal tunnel syndrome.
Surprisingly this is even worse with a softer support but I don't want to risk it either way.

I think of them more as _palm_ rests, where I rest the lower part of the palm on the rest, making sure the wrist itself doesn't receive any pressure.
:::

### Magnet attachments

::: flex
![](/images/cosmos/magnets_in_case.jpg)
![](/images/cosmos/magnets_on_rest.jpg)
:::

The wrist rests didn't come with any sort of attachment to the case, so they just always drifted away.
I tried to combat this by gluing magnets inside the case and outside the wrist rest, making them stick together just enough to stay together during normal use, while being easily removable.

## Microcontroller holder

![The microcontroller is held in place by a holder you screw into the case.](/images/cosmos/microcontroller_holder.jpg)

There's a holder to fasten the microcontroller to the case that I use.
I had to manually make a hole to make the `Boot` button accessible, which was easily accomplished when slicing the model.

## Bottom plate

![A flexible bottom plate hides the wiring.](/images/cosmos/bottom_plate.jpg)

One problem with the [Ferris][] was that it would sometimes slip on the table.
I counteracted this by using an old Netrunner playmat but I wanted another solution.

The keyboard is generated with a bottom plate that's used to hide and protect the internals.
I printed it in TPU, a flexible and rubbery material, that gives enough grip to stay relatively still when I'm typing.

# Wiring

![The complete wiring of the right-side keyboard.](/images/cosmos/right_wiring_complete.jpg)

## Matrix

One of the first things you need to do when wiring up a custom keyboard is to plan out a matrix.
I guess you could directly wire every switch directly to the controller too, but that's not feasible if you have a larger amount of keys, so the usual thing is to use a matrix approach instead.

What it means is you should wire together all keys in a row and connect that to a pin on the controller, and to the same with the rows.

It might look something like this:

::: flex
![](/images/cosmos/left_wiring.jpg)
![](/images/cosmos/right_wiring.jpg)

The green lines indicate columns and the purple lines indicates rows.
:::

You should also use diodes in the matrix (for either rows or columns, I chose the rows). Pay attention to the diode direction.

![The rows are connected with diodes and with a cable to a pin on the controller.](/images/cosmos/left_rows_soldered.jpg)

![The matrix on the right side.
It was a lot more difficult to solder because of the awkward positions of the switches.](/images/cosmos/right_matrix.jpg)

![The 3rd matrix I soldered for the right side, this time without the challenging mouse keys.
Note that I wired it up slightly differently than in the wiring plan above because it felt more straightforward.
Exactly how you choose to construct the matrix doesn't really matter, as long as every key has a unique row/column combination.](/images/cosmos/right_matrix_no_mouse_keys.jpg)

![Both the rows and columns are wired up and soldered to the controller.](/images/cosmos/left_matrix.jpg)

The wiring is horrible, I know.

I only lost one microcontroller due to a short...
With my wiring prowess I consider that a success!

## Controller wiring

![The right-side controller connected to the TRRS and the trackball sensor.](/images/cosmos/microcontroller_cutoff.jpg)

::: warn
It's a good idea to plan out the pin assignments in advance.
I made the mistake of _soldering_ the wrong pins, mixing the two sets of SPI pins (you can't use RX0 together with TX1 for example).

Or you could not solder directly on the controller, like a normal person.
:::

![The pins of the [Liatris][] microcontroller.
It's an RP2040-based controller.](/images/cosmos/liatris.webp)

| Controller pin | Connection |
|:---- |:- |
| 1 | Handedness (V~CC~ on the left keyboard and GND on the right) |
| 2 | TRRS data |
| 3, 4, 5, 6, 7 | Matrix columns |
| 20, 22, 26, 27 | Matrix rows |
| 13 (CS1) | Trackball SS |
| 14 (SCK1) | Trackball SCK |
| 15 (TX1) | Trackball MOSI |
| 16 (RX1) | Trackball MISO |

::: note
Although I connected trackball MT to pin 21 on the controller, the motion functionality isn't supported for split keyboards.
I also didn't connect RST.
:::

![The TRRS connector is connected to Vcc, GND, and pin 2 (and similarly on the right side).
Pin 1 is also connected to Vcc to signal to QMK that this is the left side of the keyboard, whereas pin 1 is connected to GND on the right controller.
](/images/cosmos/left_micro_soldered.jpg)

![The [pmw3389][] sensor attached beneath the trackball.](/images/cosmos/pmw339.jpg)

::: important
The trackball sensor is _very_ sensitive with the distance towards the trackball.
With my last print I had to file down the print where the sensor was attached to in order to get the sensor to track properly.
:::



# Adding the keyboard to QMK

The QMK cli has the `qmk new-keyboard` command that helps you get started.
I couldn't get the generated template to work for me, so I copied settings from an existing keybord with `rp2042` support.

I'll try to hit on the most important parts of the config, take a [look at the source code][cybershard] for all details.

## Basic setup

The folder structure for a keyboard looks like this:

{path="qmk_firmware/keyboards"}
```
cybershard
├── keyboard.json
├── rules.mk
└── keymaps
    └── default
        ├── config.h
        ├── keymap.c
        └── ...
```

({=Cybershard=} is the name I eventually settled on for the keyboard.)

The most important part is `keyboard.json` that defines (almost) everything we need for a new keyboard in QMK.

First you need to set the `processor`, `bootloader`, and `usb` values.
The [Liatris][] microcontroller uses the [RP2040](https://docs.qmk.fm/platformdev_rp2040) MCU, and I just picked some vendor- and product identifiers:

{path="keyboard.json"}
```json
{
    "keyboard_name": "cybershard",
    "processor": "RP2040",
    "bootloader": "rp2040",
    "usb": {
        "device_version": "0.0.1",
        "pid": "0x0002",
        "vid": "0x0361"
    },
}
```

Then we need to define the matrix (with the pins we soldered) and the layout (how we'll configure the keymap in `keymap.c`):

{path="keyboard.json"}
```json
{
    "diode_direction": "COL2ROW",
    "matrix_pins": {
        // We need to use a `GP` prefix for the pins.
        "rows": ["GP26", "GP27", "GP22", "GP20"],
        "cols": ["GP3", "GP4", "GP5", "GP6", "GP7"]
    },
    "layouts": {
        "LAYOUT": {
            "layout": [
                // First physical row
                { "matrix": [1, 0], "x": 0, "y": 0 },
                { "matrix": [0, 1], "x": 0, "y": 0 },
                { "matrix": [0, 2], "x": 0, "y": 0 },
                { "matrix": [0, 3], "x": 0, "y": 0 },
                { "matrix": [0, 4], "x": 0, "y": 0 },

                // Second row
                { "matrix": [2, 0], "x": 0, "y": 0 },
                { "matrix": [1, 1], "x": 0, "y": 0 },
                { "matrix": [1, 2], "x": 0, "y": 0 },
                { "matrix": [1, 3], "x": 0, "y": 0 },
                { "matrix": [1, 4], "x": 0, "y": 0 },

                // etc...
            ]
        }
    }
}
```

Note that we can pick whatever physical pins we want as we can move around and configure them in software.
The `LAYOUT` macro is what we use in `keymap.c` to define our keymap.
When defining it we can choose to skip certain keys and reorganize it to be easier to define; for example, there's no switch at `0,0` in my keyboard so I skip that.

The above `LAYOUT` can then be used like this:

{path="keymap.c"}
```c
LAYOUT(
 SE_J,    SE_C,    SE_Y,    SE_F,    SE_P,
 SE_R,    SE_S,    SE_T,    SE_H,    SE_K,
 SE_COMM, SE_V,    SE_G,    SE_D,    SE_B,
          SE_A,    SE_B,
                            // Thumb keys
                            FUN_CLR, MT_SPC,
),
```

## Flashing

With the above setup we should be able to flash the keyboard by first entering the boot loader and running:

```fish
qmk flash -kb cybershard -km default
```

::: tip
I didn't add a reset button to the keyboard that you typically use to enter the boot loader.
The [Liatris][] has a boot button that you can hold when you connect the keyboard, but I want to hide the controller inside the casing.

QMK has a `QK_BOOT` key that does the same.
I added it as a 5-finger [combo][] to make it easily accessible but difficult to press by accident.
:::

Now the process of updating the firmware is quite nice and unless I screw up I don't need to connect another keyboard to do it.

1. Start flashing with `qmk flash` (it will wait until it finds a flashable target).
2. Press the `QK_BOOT` combo (the keyboard becomes unresponsive).
3. Wait until the script finishes and the keyboard is available again.

::: note
`qmk flash` didn't work for me and it always got stuck at:

```
Flashing for bootloader: rp2040
Waiting for drive to deploy...
```

After some digging around I found that all you're doing is copying a `.uf2` file into a usb storage, and the controller will then reboot as a keyboard with _something_ like this:

```fish
qmk compile -kb cybershard -km default
sudo mount /dev/sdf1 /media/sd
sudo cp cybershard_default.uf2 /media/sd/
```

After more frustration I found out that the flash scripts looks for a file called `INFO_UF2.TXT` under all drives mounted below `/media`.
Because my system doesn't mount usb drives by default the script would never find it and hang.

The simple solution is to start mounting usb drives automatically, which I did by installing [udevil](https://ignorantguru.github.io/udevil/) and running `devmon` on system startup.
:::

## Split keyboard

To get the split keyboard feature to work I had to set the `SERIAL_DRIVER` option in `rules.mk`:

{path="rules.mk"}
```make
SERIAL_DRIVER = vendor
```

{path="keyboard.json"}
```json
{
    "split": {
        "enabled": true,
        // The pin that signals if the current controller is the left (high)
        // or right (low) controller.
        "handedness": {
            "pin": "GP1"
        },
        // The TRRS data pin.
        "soft_serial_pin": "GP2",
        "matrix_pins": {
            "right": {
                // We can override the pins for the right controller.
                // Note that GP26 and GP27 are swapped compared to the left side
                // due to a mistake I made when soldering.
                "rows": ["GP27", "GP26", "GP22", "GP20"],
                "cols": ["GP3", "GP4", "GP5", "GP6", "GP7"]
            }
        },
        "transport": {
            "sync": {
                // We need to sync the matrix state to allow combos, mods, and
                // other stuff to work.
                "matrix_state": true
            }
        }
    },
    "layouts": {
        "LAYOUT": {
            // The rows 0 to 3 specifies rows on the left side and
            // 4 to 7 the rows on the right side.
            "layout": [
                // These 5 keys are the first row on the left side.
                { "matrix": [1, 0], "x": 0, "y": 0 },
                { "matrix": [0, 1], "x": 0, "y": 0 },
                { "matrix": [0, 2], "x": 0, "y": 0 },
                { "matrix": [0, 3], "x": 0, "y": 0 },
                { "matrix": [0, 4], "x": 0, "y": 0 },
                // These 5 keys are the first row on the right side.
                { "matrix": [4, 0], "x": 0, "y": 0 },
                { "matrix": [4, 1], "x": 0, "y": 0 },
                { "matrix": [4, 2], "x": 0, "y": 0 },
                { "matrix": [4, 3], "x": 0, "y": 0 },
                { "matrix": [5, 4], "x": 0, "y": 0 },

                // etc..
            ]
        }
    }
}
```

The `LAYOUT` macro is just a function with many arguments but with the right order it can be formatted
to look similar to the physical keyboard.
This is for example the base layer of my keyboard:

```c
LAYOUT(
 // Left side                                    // Right side
 SE_J,    SE_C,    SE_Y,    SE_F,    SE_P,       SE_X,    SE_W,    SE_O,    SE_U,    SE_DOT,
 SE_R,    SE_S,    SE_T,    SE_H,    SE_K,       SE_M,    SE_N,    SE_A,    SE_I,    REPEAT,
 SE_COMM, SE_V,    SE_G,    SE_D,    SE_B,       SE_SLSH, SE_L,    SE_LPRN, SE_RPRN, SE_UNDS,
          SE_A,    SE_B,
                            // Left thumb keys   // Right thumb key
                            FUN_CLR, MT_SPC,     SE_E,
                                                 // Mouse thumb keys          // Mouse pinky
                                                 SE_X,    KC_BTN1,                   KC_BTN2
),
```

## Trackball

It took a long time for me to get the trackball working.
There's quite a lot of documentation for QMK but curiously enough I didn't find anything that covered the whole setup.
I arrived here by trial and error, trying to piece together parts from other keyboards into a setup that worked for me.

First we need to create the files `halconf.h` and `mcuconf.h` (they go in the same folder as `keyboard.json`) to enable the SPI driver:

{path="halconf.h"}
```c
#pragma once
#include_next <halconf.h>
#define HAL_USE_SPI TRUE
```

{path="mcuconf.h"}
```c
#pragma once
#include_next <mcuconf.h>
#undef RP_SPI_USE_SPI1
#define RP_SPI_USE_SPI1 TRUE
```

::: important
I enable the `SPI1` device that uses the `CS1`, `SCK1`, `TX1`, and `RX1` pins on the controller.
If you want to use the `SPI0` device then you must connect to the `CS0`, `SCK0`, `TX0`, and `RX0` pins instead.
:::

And enable the pointing device with the `pmw3389` device driver in `rules.mk`

{path="rules.mk"}
```
POINTING_DEVICE_ENABLE = yes
POINTING_DEVICE_DRIVER = pmw3389
```

Now we need to add the sensor pins to `config.h`:

{path="config.h"}
```c
// SPI1, matching mcuconf.h
#define SPI_DRIVER SPID1
// The pin connections from the pmw3389 sensor
#define SPI_MISO_PIN GP12
#define PMW33XX_CS_PIN GP13
#define SPI_SCK_PIN GP14
#define SPI_MOSI_PIN GP15
```

This should be enough to get the sensor going, but because we have a split keyboard we need to set that up too:

{path="config.h"}
```c
#define SPLIT_POINTING_ENABLE
// The trackball is on the right
#define POINTING_DEVICE_RIGHT
```

There are some additional tweaks that I had to play with to make the trackball work well:

{path="config.h"}
```c
// The trackball is quite sensitive to how
// large the liftoff distance should be.
#define PMW33XX_LIFTOFF_DISTANCE 0x10
// Sets the mouse resolution, up to 16000.
// I still haven't settled on a value here.
#define PMW33XX_CPI 2000
// Make the ball move in the direction I want.
#define POINTING_DEVICE_ROTATION_270 1
#define POINTING_DEVICE_INVERT_X 1
```

With that I got the trackball move the mouse as expected.

### Debug

As I struggled to get the trackball working I tried to use the debug output.
I'll include it here for completeness sake:

1. Enable the console in `rules.mk`:

    {path="rules.mk"}
    ```
    CONSOLE_ENABLE = yes
    ```

1. Enable pointing device debugging in `config.h`:

    {path="config.h"}
    ```c
    #define POINTING_DEVICE_DEBUG
    ```

1. Turn on debugging in `keymap.c`:

    {path="keymap.c"}
    ```c
    void keyboard_post_init_user(void) {
        debug_enable = true;
        debug_mouse = true;
    }
    ```

And then run `qmk console` from the command line.

[Liatris]: https://splitkb.com/products/liatris

[v2-ball]: https://ryanis.cool/cosmos/beta#cf:ChYIBBAFWAAYBSAEKL4BMLQBUABAAEgBWkwKEQjji8ys8DMQpqngxvCziOQBEg4Ii4XQlhAQgJqKoOuFchIXCNqD2LawigEQyaPAzeD7h+QBGKIDICgSDgipynEQm4mEnuDckOQBUhowgE4IABCAyL0CGICGisAHIICAnAEo0MbBAkJTCAPgAQF4A9gBARABSABIAEgASABIAEgASABgAGgAcAEYACAAKACYAfQDqAHoB6AByAGwAQCQAYQHuAEAgAEAMAA4KFgBiAEBwAEAyAHYBNABhAdiAggB
[v2-left]: https://ryanis.cool/cosmos/beta#cf:ChYIBBAFWAAYBSAEKL4BMLQBUABAAEgAWiMKEQjji8ys8DMQpqngxvCziOQBEg4Ii4XQlhAQgJqKoOuFclIaMIBOCAAQgMi9AhiAhorAByCAgJwBKNDGwQJCUwgD4AEBeAPYAQEQAEgASABIAEgASABIAEgAYABoAHABGAAgACgAmAH0A6gB6AegAcgBsAEAkAGEB7gBAIABADAAOChYAYgBAcABAMgB2ATQAYQH
[v3]: https://ryanis.cool/cosmos/beta#expert:eJzlWt9v2zYQfvdfQeRlaSHRli0njoe+JNuAYMgyNOlT4AdaomIusiSQVBw38P++O9KW9cOeHSBtBExoVel4PN199x1FnxqkidIkzbSAizG5tRfkC3ntELJgcXw/E8FTwhUM+s5adjeTaR6K5HFMekbGpyW1jehGJIX0DxboVMIYHeHoE19eMiVA+SSYpcEJylQg+eI6CUXAQf7geg7Z/XdSaN8vMw4mzDURieJSb03die84eDPYiq7SPNFcKpE8jYmWOccRCCUJeTgmryu8DdIk4dbZEy2lOqkI0ei3u0sYY89cskdeHQb3+csY/QTpXAQyhSEt0zjmaC+TqRG6uZq6NuqIKc2Tm7rqxjl4iBYBi69iziRLAo4QGusBSu4wKrVVVzMexxAJ0RaZKYAMzyGxyKwSWXVWnW6X/HV7//uY2OmkS/SMb4MgC6FnqJTwR6bFMwdoTVYIk5xkMQt4SFiu0zkzvsVLitrXiTFjHtll4TN6GxLNpg7KFSfPLM7ByIJLPsYJtYR7Hh06pN8zZ3Py8ewN8XxuBCCe4Mw63oM+9TqdwFA5yOUz0zl4ajlc3N9GV2mcz5MxmHSqA1/TxZgYocpYALw2InDKG1WE1gDKL1DOZADpAEA73c+fO+Qz+aZ4lMckAgwV1xrmEEZCEUUQclJyDXVRCfHKgIxLLAhFQdxdR2GkV7VQKKWFCWdfaCV37mcmXQknucJUpCRLlcACN0/Os4zL4snkWv+ioBg006A7XRoVoKaNIgnJix2E2agNo2AFKKni8oTvJI0iiN3EQtbBmAf9Cc/52zjzBYi1IPdSRaefMCr7zFOv75CHnkPwz8ReevYyYrHiFdWqpldcbjUL107XisUgokN+45FIhF3rNpko4bFNBKg9wooxJuD/wwR8fwDrmAyyqbFiATPLWsCg0uw4IVDvkYhrSrjiAN36m7sYmGJWh+WJkazsAFMZUBwyam+DOFdWbe3R2tomo+MqqHhQU6q3yQ3TUrycbpxq8sgewZpCLhZfITW+ut76flXYruDrQup61SEAdX65PK2mHlVMeO8B4KAB4Ky1APZaiJ/fwC9pLX5t5F+zgPOW4Oe9uYB7H1m/s3SOGgLf5ScNUP9pLagHivojMG3W9Ly18LWQks2SFi2Br/fmkob9sut/dE3PRRjGvFnUT62F9UBRfwiqzap2WotfG1nZLOu0Hfi9varNZuejq1oCLM2ajtuK6eH39M+HtFnStK3wtZGRzYrOfiJ81eZME8O3779dz2tDYZvAmpX9a6uxPfTb2jt3SAte2d1Wg3iQn28BsTM5tgWpZ/l8Wmo/htiWA71c2d5pwpmcmu5oMc8puo+204idRwX0JWyO3f1yE9VYv5XiUST7mo79ER2dlY/z3a3FaqOSDobl42x347I8x/XPaX9UOi4ac3DapNa7dAfgjzsYwGlUHQLka5TYQ4hdy71N+eau/ButUyLBgTRXHB3Rc9za2X/M77Zy9L2jgvXBwNDQzLRokTrbZn4abQmzKRdaS3W9X17v8JsPUzua5kbebPL3q3L7RaBv+v2lhx7ZGt5b8NbIEfW+G8syQctq7mA/Kct6Z03yFrmp5dj1BhRyhEsBbPy9natBqeQ+1VbNxnppaTiE9WLXwgtWg6cpi+P3BtDtD4+DEMIdVA7/OEj9IfUq845G2OtRWBf8PkWIfbp7P9CEWJkvna9EslDkhqNoRomQm5s9AP8IcrpnR7JzeByUF029vezsU9xDDfHs0d3vqvdj548Az/Oofxx8I/ofr5wKzqMh7fvlYx+eO8h4ZgAd4LP89wYUtwh2EV1IofRXrvSeF/X/5I3HX7JUatwAsTzWm8+96/+XgX7XcEIRfqockwfQW+8aHZxjaTdxOqt/AWrGK+I=>
[v6]: https://ryanis.cool/cosmos/beta#expert:eJzlWlFv2zYQfs+vIPKytLBoy7Jjx0Vfmm1AMWQZmhR7CPxAS5TNRZYEkkrsFvnvuyMlWbLsRenaRcCIWJGOR+r43Xcn+Wg/iZUmSaoFnMzItT0h78nXE0IeWRTdroR/H3MFnaNeLrtZySQLRLyckYGR8UVFrRBdibiU/sp8nUjoo1PsvefbD0wJUD71V4l/ijLlS/74MQ6Ez0F+57g9cvgzL7VvtymHKcw5EbHiUu+muhFfsPPK24kukyzWXCoR38+IlhnHHlhKHPBgRr4+4aWfxDG3xp5qKdVpTYiTfr75AH3sgUu25PVuMJ9vZmgnQiCF0p+40jMDJiERj5d6NSNjgxAha7b5UwQocQe5aHMdhorrHERCvhTXztAKWLyMOA6wl5rH2vhhaARmBWvhywRM0jKJIo7rSGVihE6mFo5FO2QKxl7tqxagwOK08Fl0GXEmWexzdJ1ZlY+SG0RT7dTVikcRLJNo65EFOBfuQyKRWiW07OndSb9Pfr++/WVG7ASkT/SK7+Ajj0KvUCnmS6bFAwenGj4QJjlJI+bzgLBMJ2tmrIu2FLU/xmYac9M+Cx7Q3oBotuihXHHywKIMJnnkks9wwB7V3AEd94h7gcehOXhGMMbjuRG4dDzHkfue9lzqnpz4Joj8TD4wnYGlNnrK6+vwMomydQxuG/fqHZ+SR+CDgTBlPnjSiMAod1oT2glQfoFyJn1DEYD0pP/27Ql5Sz4rHmYRCQFFIAySgjASiDCERccV41AXlRCxFAJhi8GoKIj7+TqM9HJvMZTScore8cVVDLpdGZfFnGQK3ZGQNFEC04u5d5amXJb3Jh/1TwpCUTMNuoutUcnJDZwPyMZ2wmjUhl6YBYipouqALyQx4VJdjbnPb3CbP4wt74Fbj+RWqvDsDS7L3vIMwofcwQf/5vbUtachixSvqrp1Tbc83WmWlp3likWnRYf8zEMRC5tpC19U8NgZD2pLyFczAgu4m4PxdzC9TSZ5pJXp0yRVn6VFsiEEoj4U0Z4S5jug3LC4ioArJkdsc4WnPM+oFHgOTrWXfpQpq5eblGsXLp3VYcVGTbxex1dMS7E5K6xqUsk2P2eRgxFYSo2xjlsInsrJaxBDciSDehfAuv6wPat7/02ZI78Hhl4Dw1V3MRx0EsJRA8K4uxB2k4XNSM66AqH78kgevGogr5I1agh8tp82cP2ru7g+F92vAmszuNfdRbCTxGzGtugKgoOXxza8RzujVw/utQiCiDej+767yD4X3a8DbDO8e92FsJvcbMZ30hEIvyG8zRvQq4e3BGCawR11FtYWT+5XQLUZ27SzCHaTl83QTv9LBOs1nCaM3/Bq7rhuJyLcLK0Z4u+6De+z37/dSY904SHe7zaOz7O0Izhuuo3js3w8h8Mu2PPa5+Bw7fMFcM9bF4j1KlsvKsXhAIumoJcpW9uOOZMLU70ux/XK2rCtA2NdWEHWIGyNOz/VsrCZ/VqKpYiP1oSndHpebZPjqy+Lw0Pqjavt/HBduTrGGU3ocFppF40xOGy+V1p2PLDH8Tw4TOtdAL5xyL995tYD7vDX56c2vm8ybEon+Mpt/w0MOaqQNKvxhxAYwQxjjPa8rI6E2m3CJOGORkW80T0C7O9y7O/MmCg5sNVh5M3NmWFdbndyhvk+TeW2LQv6R3OGnaRFymgZtgURveNkreqdN0ldumfPz47rUXATJmX4VuYeJEslFN/sZd5GzrWcHNus2szeMK1/v2BR9L0RdIbjdhjCer1aG7XDdDSmbm1ca4jdAYWEMRpSxHhED7+gNTFWZnv8K5EsEJmhKU6jRMDNxTGEfwQ9Hci0nlttLfk6uqDTdvC6gxF9AWvNzq8zMZB6dPKjaftDQHUv6HBUa+1R9SaV1hriIXX/edxRCruYJBzgH3y9++5gz8vkW/4i48iD/3/9BOWbNJEaX7NYFuli0z//ZRBOv4ceinC7ekbuQC9/je3hGEvVuXns/Q3iGMSf
[final-version]: #
[Cosmos]: https://ryanis.cool/cosmos/
[hhkb]: https://hhkeyboard.us/
[uhk]: https://ultimatehackingkeyboard.com/
[das-ultimate]: https://www.daskeyboard.com/daskeyboard-4-ultimate/
[model-m]: https://en.wikipedia.org/wiki/Model_M_keyboard
[g80]: https://www.moergo.com/
[ergo-ez]: https://ergodox-ez.com/
[DataHand]: https://en.wikipedia.org/wiki/DataHand
[Stenotype]: https://en.wikipedia.org/wiki/Stenotype
[CharaChorder]: https://www.charachorder.com/
[t34]: /series/t-34
[Dactyl]: https://github.com/adereth/dactyl-keyboard
[Dactyl Manuform]: https://github.com/carbonfet/dactyl-manuform
[Ferris]: https://github.com/pierrechevalier83/ferris
[Liatris]: https://splitkb.com/products/liatris
[t34-discussion]: /blog/2021/06/03/the-t-34-keyboard-layout/
[sunset]: https://splitkb.com/collections/switches-and-keycaps/products/sunset-kailh-low-profile-choc-switches
[silent]: https://splitkb.com/collections/switches-and-keycaps/products/ambients-kailh-low-profile-choc-switches
[linear]: https://splitkb.com/collections/switches-and-keycaps/products/kailh-low-profile-choc-switches?variant=42309434802435
[clicky]: https://splitkb.com/collections/switches-and-keycaps/products/kailh-low-profile-choc-switches?variant=39459382427725
[keycaps]: https://splitkb.com/collections/switches-and-keycaps/products/mbk-pbt-coloured-blank-keycaps
[Kensington SlimBlade]: https://www.kensington.com/p/products/ergonomic-desk-accessories/ergonomic-input-devices/slimblade-trackball/
[pmw3389]: https://www.tindie.com/products/citizenjoe/pmw3389-motion-sensor/
[keycaps-homing]: https://splitkb.com/collections/switches-and-keycaps/products/mbk-pbt-coloured-blank-keycaps?variant=47289185632603
[automatic mouse layer]: https://docs.qmk.fm/features/pointing_device#pointing-device-auto-mouse
